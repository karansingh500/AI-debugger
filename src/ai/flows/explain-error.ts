'use server';

/**
 * @fileOverview Explains code errors using AI.
 *
 * - explainError - A function that takes code and an error message, and returns an explanation of the error.
 * - ExplainErrorInput - The input type for the explainError function.
 * - ExplainErrorOutput - The return type for the explainError function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ExplainErrorInputSchema = z.object({
  code: z.string().describe('The code to analyze.'),
  errorMessage: z.string().describe('The error message generated by the compiler.'),
  language: z.string().describe('The programming language of the code.'),
});
export type ExplainErrorInput = z.infer<typeof ExplainErrorInputSchema>;

const ExplainErrorOutputSchema = z.object({
  explanation: z.string().describe('A clear explanation of the error and its potential causes.'),
});
export type ExplainErrorOutput = z.infer<typeof ExplainErrorOutputSchema>;

export async function explainError(input: ExplainErrorInput): Promise<ExplainErrorOutput> {
  return explainErrorFlow(input);
}

const prompt = ai.definePrompt({
  name: 'explainErrorPrompt',
  input: {schema: ExplainErrorInputSchema},
  output: {schema: ExplainErrorOutputSchema},
  prompt: `You are an expert software debugger. A user has provided the following code, error message, and programming language. Your task is to explain the error in simple terms, including potential root causes, so that they can quickly understand it.

Programming Language: {{{language}}}
Code:
\`\`\`{{{language}}}
{{{code}}}
\`\`\`
Error Message:
{{{errorMessage}}}`,
});

const explainErrorFlow = ai.defineFlow(
  {
    name: 'explainErrorFlow',
    inputSchema: ExplainErrorInputSchema,
    outputSchema: ExplainErrorOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
